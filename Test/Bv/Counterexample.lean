import LeanSAT.Reflect.Tactics.BVDecide

open BitVec

/--
error: The prover found a potential counter example, consider the following assignment:
x = 0xffffffffffffffff#64
---
error: unsolved goals
case h
x : BitVec 64
a✝ : (!x.ult (x + 1)) = true
⊢ False
-/
#guard_msgs in
example (x : BitVec 64) : x < x + 1 := by
  bv_decide

/--
error: The prover found a potential counter example, consider the following assignment:
x = 0x00000000000001ff#64
---
error: unsolved goals
case h
x : BitVec 64
h : x.ult 512 = true
a✝ : (x ^^^ x == 0) = true
⊢ False
-/
#guard_msgs in
example (x : BitVec 64) (h : x < 512) : x ^^^ x ≠ 0 := by
  bv_decide


/-
This is a modified version of Eval.Popcount with a mistake
-/

def pop_spec' (x : BitVec 32) : BitVec 32 :=
  go x 0 32
where
  go (x : BitVec 32) (pop : BitVec 32) (i : Nat) : BitVec 32 :=
    match i with
    | 0 => pop
    | i + 1 =>
      let pop := pop + (x &&& 1)
      go (x >>> 1) pop i

def optimized (x : BitVec 32) : BitVec 32 :=
    let x := x - ((x >>> 1) &&& 0x55555555);
    let x := (x &&& 0x33333333) + ((x >>> 2) &&& 0x33333333);
    let x := (x + (x >>> 4)) &&& 0x0F0F0F0F;
    let x := x + (x >>> 8);
    let x := x + (x >>> 16);
    -- MISTAKE HERE: the 4 should be a 3
    x &&& 0x0000004F

/--
error: The prover found a potential counter example, consider the following assignment:
x = 0xffffffff#32
---
error: unsolved goals
case h
x : BitVec 32
a✝ :
  (!0 + (x &&& 1) + (x >>> 1 &&& 1) + (x >>> 2 &&& 1) + (x >>> 3 &&& 1) + (x >>> 4 &&& 1) + (x >>> 5 &&& 1) +
                                                            (x >>> 6 &&& 1) +
                                                          (x >>> 7 &&& 1) +
                                                        (x >>> 8 &&& 1) +
                                                      (x >>> 9 &&& 1) +
                                                    (x >>> 10 &&& 1) +
                                                  (x >>> 11 &&& 1) +
                                                (x >>> 12 &&& 1) +
                                              (x >>> 13 &&& 1) +
                                            (x >>> 14 &&& 1) +
                                          (x >>> 15 &&& 1) +
                                        (x >>> 16 &&& 1) +
                                      (x >>> 17 &&& 1) +
                                    (x >>> 18 &&& 1) +
                                  (x >>> 19 &&& 1) +
                                (x >>> 20 &&& 1) +
                              (x >>> 21 &&& 1) +
                            (x >>> 22 &&& 1) +
                          (x >>> 23 &&& 1) +
                        (x >>> 24 &&& 1) +
                      (x >>> 25 &&& 1) +
                    (x >>> 26 &&& 1) +
                  (x >>> 27 &&& 1) +
                (x >>> 28 &&& 1) +
              (x >>> 29 &&& 1) +
            (x >>> 30 &&& 1) +
          (x >>> 31 &&& 1) ==
        ((x + (~~~(x >>> 1 &&& 1431655765) + 1) &&& 858993459#32) +
                    ((x + (~~~(x >>> 1 &&& 1431655765) + 1)) >>> 2 &&& 858993459) +
                  ((x + (~~~(x >>> 1 &&& 1431655765) + 1) &&& 858993459#32) +
                      ((x + (~~~(x >>> 1 &&& 1431655765) + 1)) >>> 2 &&& 858993459)) >>>
                    4 &&&
                252645135) +
              ((x + (~~~(x >>> 1 &&& 1431655765) + 1) &&& 858993459#32) +
                      ((x + (~~~(x >>> 1 &&& 1431655765) + 1)) >>> 2 &&& 858993459) +
                    ((x + (~~~(x >>> 1 &&& 1431655765) + 1) &&& 858993459#32) +
                        ((x + (~~~(x >>> 1 &&& 1431655765) + 1)) >>> 2 &&& 858993459)) >>>
                      4 &&&
                  252645135) >>>
                8 +
            (((x + (~~~(x >>> 1 &&& 1431655765) + 1) &&& 858993459#32) +
                      ((x + (~~~(x >>> 1 &&& 1431655765) + 1)) >>> 2 &&& 858993459) +
                    ((x + (~~~(x >>> 1 &&& 1431655765) + 1) &&& 858993459#32) +
                        ((x + (~~~(x >>> 1 &&& 1431655765) + 1)) >>> 2 &&& 858993459)) >>>
                      4 &&&
                  252645135) +
                ((x + (~~~(x >>> 1 &&& 1431655765) + 1) &&& 858993459#32) +
                        ((x + (~~~(x >>> 1 &&& 1431655765) + 1)) >>> 2 &&& 858993459) +
                      ((x + (~~~(x >>> 1 &&& 1431655765) + 1) &&& 858993459#32) +
                          ((x + (~~~(x >>> 1 &&& 1431655765) + 1)) >>> 2 &&& 858993459)) >>>
                        4 &&&
                    252645135) >>>
                  8) >>>
              16 &&&
          79) =
    true
⊢ False
-/
#guard_msgs in
example (x : BitVec 32) : pop_spec' x = optimized x := by
  dsimp [pop_spec', pop_spec'.go, optimized]
  bv_decide

-- limit the search domain
/--
error: The prover found a potential counter example, consider the following assignment:
x = 0x0007ffff#32
---
error: unsolved goals
case h
x : BitVec 32
h1 : x.ult 1048575 = true
a✝ :
  (!0 + (x &&& 1) + (x >>> 1 &&& 1) + (x >>> 2 &&& 1) + (x >>> 3 &&& 1) + (x >>> 4 &&& 1) + (x >>> 5 &&& 1) +
                                                            (x >>> 6 &&& 1) +
                                                          (x >>> 7 &&& 1) +
                                                        (x >>> 8 &&& 1) +
                                                      (x >>> 9 &&& 1) +
                                                    (x >>> 10 &&& 1) +
                                                  (x >>> 11 &&& 1) +
                                                (x >>> 12 &&& 1) +
                                              (x >>> 13 &&& 1) +
                                            (x >>> 14 &&& 1) +
                                          (x >>> 15 &&& 1) +
                                        (x >>> 16 &&& 1) +
                                      (x >>> 17 &&& 1) +
                                    (x >>> 18 &&& 1) +
                                  (x >>> 19 &&& 1) +
                                (x >>> 20 &&& 1) +
                              (x >>> 21 &&& 1) +
                            (x >>> 22 &&& 1) +
                          (x >>> 23 &&& 1) +
                        (x >>> 24 &&& 1) +
                      (x >>> 25 &&& 1) +
                    (x >>> 26 &&& 1) +
                  (x >>> 27 &&& 1) +
                (x >>> 28 &&& 1) +
              (x >>> 29 &&& 1) +
            (x >>> 30 &&& 1) +
          (x >>> 31 &&& 1) ==
        ((x + (~~~(x >>> 1 &&& 1431655765) + 1) &&& 858993459#32) +
                    ((x + (~~~(x >>> 1 &&& 1431655765) + 1)) >>> 2 &&& 858993459) +
                  ((x + (~~~(x >>> 1 &&& 1431655765) + 1) &&& 858993459#32) +
                      ((x + (~~~(x >>> 1 &&& 1431655765) + 1)) >>> 2 &&& 858993459)) >>>
                    4 &&&
                252645135) +
              ((x + (~~~(x >>> 1 &&& 1431655765) + 1) &&& 858993459#32) +
                      ((x + (~~~(x >>> 1 &&& 1431655765) + 1)) >>> 2 &&& 858993459) +
                    ((x + (~~~(x >>> 1 &&& 1431655765) + 1) &&& 858993459#32) +
                        ((x + (~~~(x >>> 1 &&& 1431655765) + 1)) >>> 2 &&& 858993459)) >>>
                      4 &&&
                  252645135) >>>
                8 +
            (((x + (~~~(x >>> 1 &&& 1431655765) + 1) &&& 858993459#32) +
                      ((x + (~~~(x >>> 1 &&& 1431655765) + 1)) >>> 2 &&& 858993459) +
                    ((x + (~~~(x >>> 1 &&& 1431655765) + 1) &&& 858993459#32) +
                        ((x + (~~~(x >>> 1 &&& 1431655765) + 1)) >>> 2 &&& 858993459)) >>>
                      4 &&&
                  252645135) +
                ((x + (~~~(x >>> 1 &&& 1431655765) + 1) &&& 858993459#32) +
                        ((x + (~~~(x >>> 1 &&& 1431655765) + 1)) >>> 2 &&& 858993459) +
                      ((x + (~~~(x >>> 1 &&& 1431655765) + 1) &&& 858993459#32) +
                          ((x + (~~~(x >>> 1 &&& 1431655765) + 1)) >>> 2 &&& 858993459)) >>>
                        4 &&&
                    252645135) >>>
                  8) >>>
              16 &&&
          79) =
    true
⊢ False
-/
#guard_msgs in
example (x : BitVec 32) (h1 : x < 0xfffff) : pop_spec' x = optimized x := by
  dsimp [pop_spec', pop_spec'.go, optimized]
  bv_decide
